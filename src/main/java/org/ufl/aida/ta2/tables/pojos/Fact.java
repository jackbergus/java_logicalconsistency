/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables.pojos;


import javax.annotation.Generated;

import org.ufl.aida.ta2.tables.interfaces.IFact;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fact implements IFact {

    private static final long serialVersionUID = 1999883994;

    private String  mid;
    private String  id;
    private String  nisttypeleft;
    private String  nisttyperight;
    private String  nisttype;
    private String  treeId;
    private String  partiallabel;
    private String  nistfulllabel;
    private String  argumentid;
    private String  argumentnisttype;
    private String  argumentrawstring;
    private String  argumentclusterid;
    private String  argumentbadlytranslatedstring;
    private String  rkind;
    private String  rnistname;
    private String  resolvedname;
    private String  resolvedtype;
    private Double  score;
    private Boolean fromfuzzymatching;

    public Fact() {}

    public Fact(IFact value) {
        this.mid = value.getMid();
        this.id = value.getId();
        this.nisttypeleft = value.getNisttypeleft();
        this.nisttyperight = value.getNisttyperight();
        this.nisttype = value.getNisttype();
        this.treeId = value.getTreeId();
        this.partiallabel = value.getPartiallabel();
        this.nistfulllabel = value.getNistfulllabel();
        this.argumentid = value.getArgumentid();
        this.argumentnisttype = value.getArgumentnisttype();
        this.argumentrawstring = value.getArgumentrawstring();
        this.argumentclusterid = value.getArgumentclusterid();
        this.argumentbadlytranslatedstring = value.getArgumentbadlytranslatedstring();
        this.rkind = value.getRkind();
        this.rnistname = value.getRnistname();
        this.resolvedname = value.getResolvedname();
        this.resolvedtype = value.getResolvedtype();
        this.score = value.getScore();
        this.fromfuzzymatching = value.getFromfuzzymatching();
    }

    public Fact(
        String  mid,
        String  id,
        String  nisttypeleft,
        String  nisttyperight,
        String  nisttype,
        String  treeId,
        String  partiallabel,
        String  nistfulllabel,
        String  argumentid,
        String  argumentnisttype,
        String  argumentrawstring,
        String  argumentclusterid,
        String  argumentbadlytranslatedstring,
        String  rkind,
        String  rnistname,
        String  resolvedname,
        String  resolvedtype,
        Double  score,
        Boolean fromfuzzymatching
    ) {
        this.mid = mid;
        this.id = id;
        this.nisttypeleft = nisttypeleft;
        this.nisttyperight = nisttyperight;
        this.nisttype = nisttype;
        this.treeId = treeId;
        this.partiallabel = partiallabel;
        this.nistfulllabel = nistfulllabel;
        this.argumentid = argumentid;
        this.argumentnisttype = argumentnisttype;
        this.argumentrawstring = argumentrawstring;
        this.argumentclusterid = argumentclusterid;
        this.argumentbadlytranslatedstring = argumentbadlytranslatedstring;
        this.rkind = rkind;
        this.rnistname = rnistname;
        this.resolvedname = resolvedname;
        this.resolvedtype = resolvedtype;
        this.score = score;
        this.fromfuzzymatching = fromfuzzymatching;
    }

    @Override
    public String getMid() {
        return this.mid;
    }

    @Override
    public void setMid(String mid) {
        this.mid = mid;
    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    @Override
    public String getNisttypeleft() {
        return this.nisttypeleft;
    }

    @Override
    public void setNisttypeleft(String nisttypeleft) {
        this.nisttypeleft = nisttypeleft;
    }

    @Override
    public String getNisttyperight() {
        return this.nisttyperight;
    }

    @Override
    public void setNisttyperight(String nisttyperight) {
        this.nisttyperight = nisttyperight;
    }

    @Override
    public String getNisttype() {
        return this.nisttype;
    }

    @Override
    public void setNisttype(String nisttype) {
        this.nisttype = nisttype;
    }

    @Override
    public String getTreeId() {
        return this.treeId;
    }

    @Override
    public void setTreeId(String treeId) {
        this.treeId = treeId;
    }

    @Override
    public String getPartiallabel() {
        return this.partiallabel;
    }

    @Override
    public void setPartiallabel(String partiallabel) {
        this.partiallabel = partiallabel;
    }

    @Override
    public String getNistfulllabel() {
        return this.nistfulllabel;
    }

    @Override
    public void setNistfulllabel(String nistfulllabel) {
        this.nistfulllabel = nistfulllabel;
    }

    @Override
    public String getArgumentid() {
        return this.argumentid;
    }

    @Override
    public void setArgumentid(String argumentid) {
        this.argumentid = argumentid;
    }

    @Override
    public String getArgumentnisttype() {
        return this.argumentnisttype;
    }

    @Override
    public void setArgumentnisttype(String argumentnisttype) {
        this.argumentnisttype = argumentnisttype;
    }

    @Override
    public String getArgumentrawstring() {
        return this.argumentrawstring;
    }

    @Override
    public void setArgumentrawstring(String argumentrawstring) {
        this.argumentrawstring = argumentrawstring;
    }

    @Override
    public String getArgumentclusterid() {
        return this.argumentclusterid;
    }

    @Override
    public void setArgumentclusterid(String argumentclusterid) {
        this.argumentclusterid = argumentclusterid;
    }

    @Override
    public String getArgumentbadlytranslatedstring() {
        return this.argumentbadlytranslatedstring;
    }

    @Override
    public void setArgumentbadlytranslatedstring(String argumentbadlytranslatedstring) {
        this.argumentbadlytranslatedstring = argumentbadlytranslatedstring;
    }

    @Override
    public String getRkind() {
        return this.rkind;
    }

    @Override
    public void setRkind(String rkind) {
        this.rkind = rkind;
    }

    @Override
    public String getRnistname() {
        return this.rnistname;
    }

    @Override
    public void setRnistname(String rnistname) {
        this.rnistname = rnistname;
    }

    @Override
    public String getResolvedname() {
        return this.resolvedname;
    }

    @Override
    public void setResolvedname(String resolvedname) {
        this.resolvedname = resolvedname;
    }

    @Override
    public String getResolvedtype() {
        return this.resolvedtype;
    }

    @Override
    public void setResolvedtype(String resolvedtype) {
        this.resolvedtype = resolvedtype;
    }

    @Override
    public Double getScore() {
        return this.score;
    }

    @Override
    public void setScore(Double score) {
        this.score = score;
    }

    @Override
    public Boolean getFromfuzzymatching() {
        return this.fromfuzzymatching;
    }

    @Override
    public void setFromfuzzymatching(Boolean fromfuzzymatching) {
        this.fromfuzzymatching = fromfuzzymatching;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Fact other = (Fact) obj;
        if (mid == null) {
            if (other.mid != null)
                return false;
        }
        else if (!mid.equals(other.mid))
            return false;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (nisttypeleft == null) {
            if (other.nisttypeleft != null)
                return false;
        }
        else if (!nisttypeleft.equals(other.nisttypeleft))
            return false;
        if (nisttyperight == null) {
            if (other.nisttyperight != null)
                return false;
        }
        else if (!nisttyperight.equals(other.nisttyperight))
            return false;
        if (nisttype == null) {
            if (other.nisttype != null)
                return false;
        }
        else if (!nisttype.equals(other.nisttype))
            return false;
        if (treeId == null) {
            if (other.treeId != null)
                return false;
        }
        else if (!treeId.equals(other.treeId))
            return false;
        if (partiallabel == null) {
            if (other.partiallabel != null)
                return false;
        }
        else if (!partiallabel.equals(other.partiallabel))
            return false;
        if (nistfulllabel == null) {
            if (other.nistfulllabel != null)
                return false;
        }
        else if (!nistfulllabel.equals(other.nistfulllabel))
            return false;
        if (argumentid == null) {
            if (other.argumentid != null)
                return false;
        }
        else if (!argumentid.equals(other.argumentid))
            return false;
        if (argumentnisttype == null) {
            if (other.argumentnisttype != null)
                return false;
        }
        else if (!argumentnisttype.equals(other.argumentnisttype))
            return false;
        if (argumentrawstring == null) {
            if (other.argumentrawstring != null)
                return false;
        }
        else if (!argumentrawstring.equals(other.argumentrawstring))
            return false;
        if (argumentclusterid == null) {
            if (other.argumentclusterid != null)
                return false;
        }
        else if (!argumentclusterid.equals(other.argumentclusterid))
            return false;
        if (argumentbadlytranslatedstring == null) {
            if (other.argumentbadlytranslatedstring != null)
                return false;
        }
        else if (!argumentbadlytranslatedstring.equals(other.argumentbadlytranslatedstring))
            return false;
        if (rkind == null) {
            if (other.rkind != null)
                return false;
        }
        else if (!rkind.equals(other.rkind))
            return false;
        if (rnistname == null) {
            if (other.rnistname != null)
                return false;
        }
        else if (!rnistname.equals(other.rnistname))
            return false;
        if (resolvedname == null) {
            if (other.resolvedname != null)
                return false;
        }
        else if (!resolvedname.equals(other.resolvedname))
            return false;
        if (resolvedtype == null) {
            if (other.resolvedtype != null)
                return false;
        }
        else if (!resolvedtype.equals(other.resolvedtype))
            return false;
        if (score == null) {
            if (other.score != null)
                return false;
        }
        else if (!score.equals(other.score))
            return false;
        if (fromfuzzymatching == null) {
            if (other.fromfuzzymatching != null)
                return false;
        }
        else if (!fromfuzzymatching.equals(other.fromfuzzymatching))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.mid == null) ? 0 : this.mid.hashCode());
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.nisttypeleft == null) ? 0 : this.nisttypeleft.hashCode());
        result = prime * result + ((this.nisttyperight == null) ? 0 : this.nisttyperight.hashCode());
        result = prime * result + ((this.nisttype == null) ? 0 : this.nisttype.hashCode());
        result = prime * result + ((this.treeId == null) ? 0 : this.treeId.hashCode());
        result = prime * result + ((this.partiallabel == null) ? 0 : this.partiallabel.hashCode());
        result = prime * result + ((this.nistfulllabel == null) ? 0 : this.nistfulllabel.hashCode());
        result = prime * result + ((this.argumentid == null) ? 0 : this.argumentid.hashCode());
        result = prime * result + ((this.argumentnisttype == null) ? 0 : this.argumentnisttype.hashCode());
        result = prime * result + ((this.argumentrawstring == null) ? 0 : this.argumentrawstring.hashCode());
        result = prime * result + ((this.argumentclusterid == null) ? 0 : this.argumentclusterid.hashCode());
        result = prime * result + ((this.argumentbadlytranslatedstring == null) ? 0 : this.argumentbadlytranslatedstring.hashCode());
        result = prime * result + ((this.rkind == null) ? 0 : this.rkind.hashCode());
        result = prime * result + ((this.rnistname == null) ? 0 : this.rnistname.hashCode());
        result = prime * result + ((this.resolvedname == null) ? 0 : this.resolvedname.hashCode());
        result = prime * result + ((this.resolvedtype == null) ? 0 : this.resolvedtype.hashCode());
        result = prime * result + ((this.score == null) ? 0 : this.score.hashCode());
        result = prime * result + ((this.fromfuzzymatching == null) ? 0 : this.fromfuzzymatching.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Fact (");

        sb.append(mid);
        sb.append(", ").append(id);
        sb.append(", ").append(nisttypeleft);
        sb.append(", ").append(nisttyperight);
        sb.append(", ").append(nisttype);
        sb.append(", ").append(treeId);
        sb.append(", ").append(partiallabel);
        sb.append(", ").append(nistfulllabel);
        sb.append(", ").append(argumentid);
        sb.append(", ").append(argumentnisttype);
        sb.append(", ").append(argumentrawstring);
        sb.append(", ").append(argumentclusterid);
        sb.append(", ").append(argumentbadlytranslatedstring);
        sb.append(", ").append(rkind);
        sb.append(", ").append(rnistname);
        sb.append(", ").append(resolvedname);
        sb.append(", ").append(resolvedtype);
        sb.append(", ").append(score);
        sb.append(", ").append(fromfuzzymatching);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IFact from) {
        setMid(from.getMid());
        setId(from.getId());
        setNisttypeleft(from.getNisttypeleft());
        setNisttyperight(from.getNisttyperight());
        setNisttype(from.getNisttype());
        setTreeId(from.getTreeId());
        setPartiallabel(from.getPartiallabel());
        setNistfulllabel(from.getNistfulllabel());
        setArgumentid(from.getArgumentid());
        setArgumentnisttype(from.getArgumentnisttype());
        setArgumentrawstring(from.getArgumentrawstring());
        setArgumentclusterid(from.getArgumentclusterid());
        setArgumentbadlytranslatedstring(from.getArgumentbadlytranslatedstring());
        setRkind(from.getRkind());
        setRnistname(from.getRnistname());
        setResolvedname(from.getResolvedname());
        setResolvedtype(from.getResolvedtype());
        setScore(from.getScore());
        setFromfuzzymatching(from.getFromfuzzymatching());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IFact> E into(E into) {
        into.from(this);
        return into;
    }
}
