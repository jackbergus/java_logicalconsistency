/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables.pojos;


import java.math.BigDecimal;
import java.util.Arrays;

import javax.annotation.Generated;

import org.ufl.aida.ta2.tables.interfaces.IMentionsForUpdate;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MentionsForUpdate implements IMentionsForUpdate {

    private static final long serialVersionUID = -747392400;

    private String     amid;
    private String     atype;
    private String     acid;
    private String[]   strings;
    private String[]   enstrings;
    private String     resolvedString;
    private BigDecimal resolvedScore;
    private Boolean    fromfuzzymatching;
    private String     resolvedType;

    public MentionsForUpdate() {}

    public MentionsForUpdate(IMentionsForUpdate value) {
        this.amid = value.getAmid();
        this.atype = value.getAtype();
        this.acid = value.getAcid();
        this.strings = value.getStrings();
        this.enstrings = value.getEnstrings();
        this.resolvedString = value.getResolvedString();
        this.resolvedScore = value.getResolvedScore();
        this.fromfuzzymatching = value.getFromfuzzymatching();
        this.resolvedType = value.getResolvedType();
    }

    public MentionsForUpdate(
        String     amid,
        String     atype,
        String     acid,
        String[]   strings,
        String[]   enstrings,
        String     resolvedString,
        BigDecimal resolvedScore,
        Boolean    fromfuzzymatching,
        String     resolvedType
    ) {
        this.amid = amid;
        this.atype = atype;
        this.acid = acid;
        this.strings = strings;
        this.enstrings = enstrings;
        this.resolvedString = resolvedString;
        this.resolvedScore = resolvedScore;
        this.fromfuzzymatching = fromfuzzymatching;
        this.resolvedType = resolvedType;
    }

    @Override
    public String getAmid() {
        return this.amid;
    }

    @Override
    public void setAmid(String amid) {
        this.amid = amid;
    }

    @Override
    public String getAtype() {
        return this.atype;
    }

    @Override
    public void setAtype(String atype) {
        this.atype = atype;
    }

    @Override
    public String getAcid() {
        return this.acid;
    }

    @Override
    public void setAcid(String acid) {
        this.acid = acid;
    }

    @Override
    public String[] getStrings() {
        return this.strings;
    }

    @Override
    public void setStrings(String... strings) {
        this.strings = strings;
    }

    @Override
    public String[] getEnstrings() {
        return this.enstrings;
    }

    @Override
    public void setEnstrings(String... enstrings) {
        this.enstrings = enstrings;
    }

    @Override
    public String getResolvedString() {
        return this.resolvedString;
    }

    @Override
    public void setResolvedString(String resolvedString) {
        this.resolvedString = resolvedString;
    }

    @Override
    public BigDecimal getResolvedScore() {
        return this.resolvedScore;
    }

    @Override
    public void setResolvedScore(BigDecimal resolvedScore) {
        this.resolvedScore = resolvedScore;
    }

    @Override
    public Boolean getFromfuzzymatching() {
        return this.fromfuzzymatching;
    }

    @Override
    public void setFromfuzzymatching(Boolean fromfuzzymatching) {
        this.fromfuzzymatching = fromfuzzymatching;
    }

    @Override
    public String getResolvedType() {
        return this.resolvedType;
    }

    @Override
    public void setResolvedType(String resolvedType) {
        this.resolvedType = resolvedType;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final MentionsForUpdate other = (MentionsForUpdate) obj;
        if (amid == null) {
            if (other.amid != null)
                return false;
        }
        else if (!amid.equals(other.amid))
            return false;
        if (atype == null) {
            if (other.atype != null)
                return false;
        }
        else if (!atype.equals(other.atype))
            return false;
        if (acid == null) {
            if (other.acid != null)
                return false;
        }
        else if (!acid.equals(other.acid))
            return false;
        if (strings == null) {
            if (other.strings != null)
                return false;
        }
        else if (!Arrays.equals(strings, other.strings))
            return false;
        if (enstrings == null) {
            if (other.enstrings != null)
                return false;
        }
        else if (!Arrays.equals(enstrings, other.enstrings))
            return false;
        if (resolvedString == null) {
            if (other.resolvedString != null)
                return false;
        }
        else if (!resolvedString.equals(other.resolvedString))
            return false;
        if (resolvedScore == null) {
            if (other.resolvedScore != null)
                return false;
        }
        else if (!resolvedScore.equals(other.resolvedScore))
            return false;
        if (fromfuzzymatching == null) {
            if (other.fromfuzzymatching != null)
                return false;
        }
        else if (!fromfuzzymatching.equals(other.fromfuzzymatching))
            return false;
        if (resolvedType == null) {
            if (other.resolvedType != null)
                return false;
        }
        else if (!resolvedType.equals(other.resolvedType))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.amid == null) ? 0 : this.amid.hashCode());
        result = prime * result + ((this.atype == null) ? 0 : this.atype.hashCode());
        result = prime * result + ((this.acid == null) ? 0 : this.acid.hashCode());
        result = prime * result + ((this.strings == null) ? 0 : Arrays.hashCode(this.strings));
        result = prime * result + ((this.enstrings == null) ? 0 : Arrays.hashCode(this.enstrings));
        result = prime * result + ((this.resolvedString == null) ? 0 : this.resolvedString.hashCode());
        result = prime * result + ((this.resolvedScore == null) ? 0 : this.resolvedScore.hashCode());
        result = prime * result + ((this.fromfuzzymatching == null) ? 0 : this.fromfuzzymatching.hashCode());
        result = prime * result + ((this.resolvedType == null) ? 0 : this.resolvedType.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MentionsForUpdate (");

        sb.append(amid);
        sb.append(", ").append(atype);
        sb.append(", ").append(acid);
        sb.append(", ").append(Arrays.toString(strings));
        sb.append(", ").append(Arrays.toString(enstrings));
        sb.append(", ").append(resolvedString);
        sb.append(", ").append(resolvedScore);
        sb.append(", ").append(fromfuzzymatching);
        sb.append(", ").append(resolvedType);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IMentionsForUpdate from) {
        setAmid(from.getAmid());
        setAtype(from.getAtype());
        setAcid(from.getAcid());
        setStrings(from.getStrings());
        setEnstrings(from.getEnstrings());
        setResolvedString(from.getResolvedString());
        setResolvedScore(from.getResolvedScore());
        setFromfuzzymatching(from.getFromfuzzymatching());
        setResolvedType(from.getResolvedType());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IMentionsForUpdate> E into(E into) {
        into.from(this);
        return into;
    }
}
