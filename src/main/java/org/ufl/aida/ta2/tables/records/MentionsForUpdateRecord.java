/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables.records;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;
import org.ufl.aida.ta2.tables.MentionsForUpdate;
import org.ufl.aida.ta2.tables.interfaces.IMentionsForUpdate;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MentionsForUpdateRecord extends UpdatableRecordImpl<MentionsForUpdateRecord> implements Record9<String, String, String, String[], String[], String, BigDecimal, Boolean, String>, IMentionsForUpdate {

    private static final long serialVersionUID = 328794693;

    /**
     * Setter for <code>public.mentions_for_update.amid</code>.
     */
    @Override
    public void setAmid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.amid</code>.
     */
    @Override
    public String getAmid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.mentions_for_update.atype</code>.
     */
    @Override
    public void setAtype(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.atype</code>.
     */
    @Override
    public String getAtype() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.mentions_for_update.acid</code>.
     */
    @Override
    public void setAcid(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.acid</code>.
     */
    @Override
    public String getAcid() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.mentions_for_update.strings</code>.
     */
    @Override
    public void setStrings(String... value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.strings</code>.
     */
    @Override
    public String[] getStrings() {
        return (String[]) get(3);
    }

    /**
     * Setter for <code>public.mentions_for_update.enstrings</code>.
     */
    @Override
    public void setEnstrings(String... value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.enstrings</code>.
     */
    @Override
    public String[] getEnstrings() {
        return (String[]) get(4);
    }

    /**
     * Setter for <code>public.mentions_for_update.resolved_string</code>.
     */
    @Override
    public void setResolvedString(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.resolved_string</code>.
     */
    @Override
    public String getResolvedString() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.mentions_for_update.resolved_score</code>.
     */
    @Override
    public void setResolvedScore(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.resolved_score</code>.
     */
    @Override
    public BigDecimal getResolvedScore() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>public.mentions_for_update.fromfuzzymatching</code>.
     */
    @Override
    public void setFromfuzzymatching(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.fromfuzzymatching</code>.
     */
    @Override
    public Boolean getFromfuzzymatching() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>public.mentions_for_update.resolved_type</code>.
     */
    @Override
    public void setResolvedType(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.mentions_for_update.resolved_type</code>.
     */
    @Override
    public String getResolvedType() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row9<String, String, String, String[], String[], String, BigDecimal, Boolean, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row9<String, String, String, String[], String[], String, BigDecimal, Boolean, String> valuesRow() {
        return (Row9) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.AMID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.ATYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.ACID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String[]> field4() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.STRINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String[]> field5() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.ENSTRINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.RESOLVED_STRING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field7() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.RESOLVED_SCORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field8() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.FROMFUZZYMATCHING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return MentionsForUpdate.MENTIONS_FOR_UPDATE.RESOLVED_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getAmid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getAtype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getAcid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] component4() {
        return getStrings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] component5() {
        return getEnstrings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getResolvedString();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component7() {
        return getResolvedScore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component8() {
        return getFromfuzzymatching();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getResolvedType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getAmid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAtype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getAcid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] value4() {
        return getStrings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] value5() {
        return getEnstrings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getResolvedString();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value7() {
        return getResolvedScore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value8() {
        return getFromfuzzymatching();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getResolvedType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value1(String value) {
        setAmid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value2(String value) {
        setAtype(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value3(String value) {
        setAcid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value4(String... value) {
        setStrings(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value5(String... value) {
        setEnstrings(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value6(String value) {
        setResolvedString(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value7(BigDecimal value) {
        setResolvedScore(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value8(Boolean value) {
        setFromfuzzymatching(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord value9(String value) {
        setResolvedType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdateRecord values(String value1, String value2, String value3, String[] value4, String[] value5, String value6, BigDecimal value7, Boolean value8, String value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IMentionsForUpdate from) {
        setAmid(from.getAmid());
        setAtype(from.getAtype());
        setAcid(from.getAcid());
        setStrings(from.getStrings());
        setEnstrings(from.getEnstrings());
        setResolvedString(from.getResolvedString());
        setResolvedScore(from.getResolvedScore());
        setFromfuzzymatching(from.getFromfuzzymatching());
        setResolvedType(from.getResolvedType());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IMentionsForUpdate> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MentionsForUpdateRecord
     */
    public MentionsForUpdateRecord() {
        super(MentionsForUpdate.MENTIONS_FOR_UPDATE);
    }

    /**
     * Create a detached, initialised MentionsForUpdateRecord
     */
    public MentionsForUpdateRecord(String amid, String atype, String acid, String[] strings, String[] enstrings, String resolvedString, BigDecimal resolvedScore, Boolean fromfuzzymatching, String resolvedType) {
        super(MentionsForUpdate.MENTIONS_FOR_UPDATE);

        set(0, amid);
        set(1, atype);
        set(2, acid);
        set(3, strings);
        set(4, enstrings);
        set(5, resolvedString);
        set(6, resolvedScore);
        set(7, fromfuzzymatching);
        set(8, resolvedType);
    }
}
