/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ldc.jOOQ.model.tables;


import org.ufl.aida.ldc.jOOQ.model.Public;
import org.ufl.aida.ldc.jOOQ.model.tables.records.SlotRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Slot extends TableImpl<SlotRecord> {

    private static final long serialVersionUID = -2101041481;

    /**
     * The reference instance of <code>public.slot</code>
     */
    public static final Slot SLOT = new Slot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlotRecord> getRecordType() {
        return SlotRecord.class;
    }

    /**
     * The column <code>public.slot.tree_id</code>.
     */
    public final TableField<SlotRecord, String> TREE_ID = createField("tree_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.slot.mentionId</code>.
     */
    public final TableField<SlotRecord, String> MENTIONID = createField("mentionId", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.slot.slot_type</code>.
     */
    public final TableField<SlotRecord, String> SLOT_TYPE = createField("slot_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.slot.slot_attribute</code>.
     */
    public final TableField<SlotRecord, String> SLOT_ATTRIBUTE = createField("slot_attribute", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.slot.arg_id</code>.
     */
    public final TableField<SlotRecord, String> ARG_ID = createField("arg_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.slot</code> table reference
     */
    public Slot() {
        this(DSL.name("slot"), null);
    }

    /**
     * Create an aliased <code>public.slot</code> table reference
     */
    public Slot(String alias) {
        this(DSL.name(alias), SLOT);
    }

    /**
     * Create an aliased <code>public.slot</code> table reference
     */
    public Slot(Name alias) {
        this(alias, SLOT);
    }

    private Slot(Name alias, Table<SlotRecord> aliased) {
        this(alias, aliased, null);
    }

    private Slot(Name alias, Table<SlotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Slot(Table<O> child, ForeignKey<O, SlotRecord> key) {
        super(child, key, SLOT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Slot as(String alias) {
        return new Slot(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Slot as(Name alias) {
        return new Slot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Slot rename(String name) {
        return new Slot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Slot rename(Name name) {
        return new Slot(name, null);
    }
}
