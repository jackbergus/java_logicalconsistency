/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ldc.jOOQ.model.tables;


import org.ufl.aida.ldc.jOOQ.model.Public;
import org.ufl.aida.ldc.jOOQ.model.tables.records.MinikbRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Minikb extends TableImpl<MinikbRecord> {

    private static final long serialVersionUID = -841247834;

    /**
     * The reference instance of <code>public.miniKB</code>
     */
    public static final Minikb MINIKB = new Minikb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MinikbRecord> getRecordType() {
        return MinikbRecord.class;
    }

    /**
     * The column <code>public.miniKB.kb_id</code>.
     */
    public final TableField<MinikbRecord, String> KB_ID = createField("kb_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.miniKB.topic_id</code>.
     */
    public final TableField<MinikbRecord, String> TOPIC_ID = createField("topic_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.miniKB.category</code>.
     */
    public final TableField<MinikbRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.miniKB.handle</code>.
     */
    public final TableField<MinikbRecord, String> HANDLE = createField("handle", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.miniKB.description</code>.
     */
    public final TableField<MinikbRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.miniKB</code> table reference
     */
    public Minikb() {
        this(DSL.name("miniKB"), null);
    }

    /**
     * Create an aliased <code>public.miniKB</code> table reference
     */
    public Minikb(String alias) {
        this(DSL.name(alias), MINIKB);
    }

    /**
     * Create an aliased <code>public.miniKB</code> table reference
     */
    public Minikb(Name alias) {
        this(alias, MINIKB);
    }

    private Minikb(Name alias, Table<MinikbRecord> aliased) {
        this(alias, aliased, null);
    }

    private Minikb(Name alias, Table<MinikbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Minikb(Table<O> child, ForeignKey<O, MinikbRecord> key) {
        super(child, key, MINIKB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Minikb as(String alias) {
        return new Minikb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Minikb as(Name alias) {
        return new Minikb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Minikb rename(String name) {
        return new Minikb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Minikb rename(Name name) {
        return new Minikb(name, null);
    }
}
