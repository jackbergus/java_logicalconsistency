/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ldc.jOOQ.model.tables;


import org.ufl.aida.ldc.jOOQ.model.Public;
import org.ufl.aida.ldc.jOOQ.model.tables.records.HypothesisRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hypothesis extends TableImpl<HypothesisRecord> {

    private static final long serialVersionUID = 561915865;

    /**
     * The reference instance of <code>public.hypothesis</code>
     */
    public static final Hypothesis HYPOTHESIS = new Hypothesis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HypothesisRecord> getRecordType() {
        return HypothesisRecord.class;
    }

    /**
     * The column <code>public.hypothesis.tree_id</code>.
     */
    public final TableField<HypothesisRecord, String> TREE_ID = createField("tree_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.hypothesis.hypothesis_id</code>.
     */
    public final TableField<HypothesisRecord, String> HYPOTHESIS_ID = createField("hypothesis_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.hypothesis.mentionId</code>.
     */
    public final TableField<HypothesisRecord, String> MENTIONID = createField("mentionId", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.hypothesis.value</code>.
     */
    public final TableField<HypothesisRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.hypothesis</code> table reference
     */
    public Hypothesis() {
        this(DSL.name("hypothesis"), null);
    }

    /**
     * Create an aliased <code>public.hypothesis</code> table reference
     */
    public Hypothesis(String alias) {
        this(DSL.name(alias), HYPOTHESIS);
    }

    /**
     * Create an aliased <code>public.hypothesis</code> table reference
     */
    public Hypothesis(Name alias) {
        this(alias, HYPOTHESIS);
    }

    private Hypothesis(Name alias, Table<HypothesisRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hypothesis(Name alias, Table<HypothesisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Hypothesis(Table<O> child, ForeignKey<O, HypothesisRecord> key) {
        super(child, key, HYPOTHESIS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Hypothesis as(String alias) {
        return new Hypothesis(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Hypothesis as(Name alias) {
        return new Hypothesis(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hypothesis rename(String name) {
        return new Hypothesis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hypothesis rename(Name name) {
        return new Hypothesis(name, null);
    }
}
