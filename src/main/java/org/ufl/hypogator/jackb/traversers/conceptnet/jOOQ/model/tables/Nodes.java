/*
 * This file is generated by jOOQ.
 */
package org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.tables;


import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Indexes;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Keys;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Public;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.tables.records.NodesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nodes extends TableImpl<NodesRecord> {

    private static final long serialVersionUID = 415969310;

    /**
     * The reference instance of <code>public.nodes</code>
     */
    public static final Nodes NODES = new Nodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodesRecord> getRecordType() {
        return NodesRecord.class;
    }

    /**
     * The column <code>public.nodes.id</code>.
     */
    public final TableField<NodesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.nodes.uri</code>.
     */
    public final TableField<NodesRecord, String> URI = createField("uri", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.nodes</code> table reference
     */
    public Nodes() {
        this(DSL.name("nodes"), null);
    }

    /**
     * Create an aliased <code>public.nodes</code> table reference
     */
    public Nodes(String alias) {
        this(DSL.name(alias), NODES);
    }

    /**
     * Create an aliased <code>public.nodes</code> table reference
     */
    public Nodes(Name alias) {
        this(alias, NODES);
    }

    private Nodes(Name alias, Table<NodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nodes(Name alias, Table<NodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Nodes(Table<O> child, ForeignKey<O, NodesRecord> key) {
        super(child, key, NODES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NODES_PKEY, Indexes.NODES_UNIQUE_URI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NodesRecord> getPrimaryKey() {
        return Keys.NODES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NodesRecord>> getKeys() {
        return Arrays.<UniqueKey<NodesRecord>>asList(Keys.NODES_PKEY, Keys.NODES_UNIQUE_URI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nodes as(String alias) {
        return new Nodes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nodes as(Name alias) {
        return new Nodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nodes rename(String name) {
        return new Nodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nodes rename(Name name) {
        return new Nodes(name, null);
    }
}
