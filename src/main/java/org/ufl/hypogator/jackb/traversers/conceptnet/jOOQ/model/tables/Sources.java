/*
 * This file is generated by jOOQ.
 */
package org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.tables;


import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Indexes;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Keys;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Public;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.tables.records.SourcesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sources extends TableImpl<SourcesRecord> {

    private static final long serialVersionUID = -1962112365;

    /**
     * The reference instance of <code>public.sources</code>
     */
    public static final Sources SOURCES = new Sources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourcesRecord> getRecordType() {
        return SourcesRecord.class;
    }

    /**
     * The column <code>public.sources.id</code>.
     */
    public final TableField<SourcesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sources.uri</code>.
     */
    public final TableField<SourcesRecord, String> URI = createField("uri", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.sources</code> table reference
     */
    public Sources() {
        this(DSL.name("sources"), null);
    }

    /**
     * Create an aliased <code>public.sources</code> table reference
     */
    public Sources(String alias) {
        this(DSL.name(alias), SOURCES);
    }

    /**
     * Create an aliased <code>public.sources</code> table reference
     */
    public Sources(Name alias) {
        this(alias, SOURCES);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sources(Table<O> child, ForeignKey<O, SourcesRecord> key) {
        super(child, key, SOURCES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SOURCES_PKEY, Indexes.SOURCES_UNIQUE_URI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SourcesRecord> getPrimaryKey() {
        return Keys.SOURCES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SourcesRecord>> getKeys() {
        return Arrays.<UniqueKey<SourcesRecord>>asList(Keys.SOURCES_PKEY, Keys.SOURCES_UNIQUE_URI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sources as(String alias) {
        return new Sources(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sources as(Name alias) {
        return new Sources(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(String name) {
        return new Sources(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(Name name) {
        return new Sources(name, null);
    }
}
