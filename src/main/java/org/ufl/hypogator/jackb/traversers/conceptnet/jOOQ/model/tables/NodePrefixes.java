/*
 * This file is generated by jOOQ.
 */
package org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.tables;


import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Indexes;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Keys;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.Public;
import org.ufl.hypogator.jackb.traversers.conceptnet.jOOQ.model.tables.records.NodePrefixesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodePrefixes extends TableImpl<NodePrefixesRecord> {

    private static final long serialVersionUID = -1514668692;

    /**
     * The reference instance of <code>public.node_prefixes</code>
     */
    public static final NodePrefixes NODE_PREFIXES = new NodePrefixes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodePrefixesRecord> getRecordType() {
        return NodePrefixesRecord.class;
    }

    /**
     * The column <code>public.node_prefixes.node_id</code>.
     */
    public final TableField<NodePrefixesRecord, Integer> NODE_ID = createField("node_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.node_prefixes.prefix_id</code>.
     */
    public final TableField<NodePrefixesRecord, Integer> PREFIX_ID = createField("prefix_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.node_prefixes</code> table reference
     */
    public NodePrefixes() {
        this(DSL.name("node_prefixes"), null);
    }

    /**
     * Create an aliased <code>public.node_prefixes</code> table reference
     */
    public NodePrefixes(String alias) {
        this(DSL.name(alias), NODE_PREFIXES);
    }

    /**
     * Create an aliased <code>public.node_prefixes</code> table reference
     */
    public NodePrefixes(Name alias) {
        this(alias, NODE_PREFIXES);
    }

    private NodePrefixes(Name alias, Table<NodePrefixesRecord> aliased) {
        this(alias, aliased, null);
    }

    private NodePrefixes(Name alias, Table<NodePrefixesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NodePrefixes(Table<O> child, ForeignKey<O, NodePrefixesRecord> key) {
        super(child, key, NODE_PREFIXES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NODE_PREFIXES_UNIQUE, Indexes.NP_PREFIX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NodePrefixesRecord>> getKeys() {
        return Arrays.<UniqueKey<NodePrefixesRecord>>asList(Keys.NODE_PREFIXES_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NodePrefixesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NodePrefixesRecord, ?>>asList(Keys.NODE_PREFIXES__NODE_PREFIXES_NODE_ID_FKEY, Keys.NODE_PREFIXES__NODE_PREFIXES_PREFIX_ID_FKEY);
    }

    public Nodes nodePrefixes_NodePrefixesNodeIdFkey() {
        return new Nodes(this, Keys.NODE_PREFIXES__NODE_PREFIXES_NODE_ID_FKEY);
    }

    public Nodes nodePrefixes_NodePrefixesPrefixIdFkey() {
        return new Nodes(this, Keys.NODE_PREFIXES__NODE_PREFIXES_PREFIX_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NodePrefixes as(String alias) {
        return new NodePrefixes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NodePrefixes as(Name alias) {
        return new NodePrefixes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodePrefixes rename(String name) {
        return new NodePrefixes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodePrefixes rename(Name name) {
        return new NodePrefixes(name, null);
    }
}
