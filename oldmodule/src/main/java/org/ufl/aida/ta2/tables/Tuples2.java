/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ufl.aida.ta2.Indexes;
import org.ufl.aida.ta2.Public;
import org.ufl.aida.ta2.tables.records.Tuples2Record;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tuples2 extends TableImpl<Tuples2Record> {

    private static final long serialVersionUID = -201644475;

    /**
     * The reference instance of <code>public.tuples2</code>
     */
    public static final Tuples2 TUPLES2 = new Tuples2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Tuples2Record> getRecordType() {
        return Tuples2Record.class;
    }

    /**
     * The column <code>public.tuples2.mid</code>.
     */
    public final TableField<Tuples2Record, String> MID = createField("mid", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.tuples2.nistType</code>.
     */
    public final TableField<Tuples2Record, String> NISTTYPE = createField("nistType", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.tuples2.scoreEvent</code>.
     */
    public final TableField<Tuples2Record, Double> SCOREEVENT = createField("scoreEvent", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.tuples2.negated</code>.
     */
    public final TableField<Tuples2Record, Boolean> NEGATED = createField("negated", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.tuples2.hedged</code>.
     */
    public final TableField<Tuples2Record, Boolean> HEDGED = createField("hedged", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.tuples2.constituent</code>.
     */
    public final TableField<Tuples2Record, String[]> CONSTITUENT = createField("constituent", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @Deprecated
    public final TableField<Tuples2Record, Object> JSON_OBJECT_AGG = createField("json_object_agg", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * Create a <code>public.tuples2</code> table reference
     */
    public Tuples2() {
        this(DSL.name("tuples2"), null);
    }

    /**
     * Create an aliased <code>public.tuples2</code> table reference
     */
    public Tuples2(String alias) {
        this(DSL.name(alias), TUPLES2);
    }

    /**
     * Create an aliased <code>public.tuples2</code> table reference
     */
    public Tuples2(Name alias) {
        this(alias, TUPLES2);
    }

    private Tuples2(Name alias, Table<Tuples2Record> aliased) {
        this(alias, aliased, null);
    }

    private Tuples2(Name alias, Table<Tuples2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tuples2(Table<O> child, ForeignKey<O, Tuples2Record> key) {
        super(child, key, TUPLES2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TUPLES2_MID_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tuples2 as(String alias) {
        return new Tuples2(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tuples2 as(Name alias) {
        return new Tuples2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tuples2 rename(String name) {
        return new Tuples2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tuples2 rename(Name name) {
        return new Tuples2(name, null);
    }
}
