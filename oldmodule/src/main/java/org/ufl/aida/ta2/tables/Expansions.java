/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ufl.aida.ta2.Public;
import org.ufl.aida.ta2.tables.records.ExpansionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Expansions extends TableImpl<ExpansionsRecord> {

    private static final long serialVersionUID = -990307978;

    /**
     * The reference instance of <code>public.expansions</code>
     */
    public static final Expansions EXPANSIONS = new Expansions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpansionsRecord> getRecordType() {
        return ExpansionsRecord.class;
    }

    /**
     * The column <code>public.expansions.eid</code>.
     */
    public final TableField<ExpansionsRecord, String[]> EID = createField("eid", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.type_event</code>.
     */
    public final TableField<ExpansionsRecord, String> TYPE_EVENT = createField("type_event", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.expansions.weight</code>.
     */
    public final TableField<ExpansionsRecord, Double> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.expansions.arg1</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG1 = createField("arg1", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.arg2</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG2 = createField("arg2", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.arg3</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG3 = createField("arg3", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.arg4</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG4 = createField("arg4", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.arg5</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG5 = createField("arg5", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.arg6</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG6 = createField("arg6", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.arg7</code>.
     */
    public final TableField<ExpansionsRecord, String[]> ARG7 = createField("arg7", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.expansions.bitmap_null</code>.
     */
    public final TableField<ExpansionsRecord, String> BITMAP_NULL = createField("bitmap_null", org.jooq.impl.SQLDataType.CHAR(7), this, "");

    /**
     * The column <code>public.expansions.bitmap_neg</code>.
     */
    public final TableField<ExpansionsRecord, String> BITMAP_NEG = createField("bitmap_neg", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>public.expansions.bitmap_hed</code>.
     */
    public final TableField<ExpansionsRecord, String> BITMAP_HED = createField("bitmap_hed", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * Create a <code>public.expansions</code> table reference
     */
    public Expansions() {
        this(DSL.name("expansions"), null);
    }

    /**
     * Create an aliased <code>public.expansions</code> table reference
     */
    public Expansions(String alias) {
        this(DSL.name(alias), EXPANSIONS);
    }

    /**
     * Create an aliased <code>public.expansions</code> table reference
     */
    public Expansions(Name alias) {
        this(alias, EXPANSIONS);
    }

    private Expansions(Name alias, Table<ExpansionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Expansions(Name alias, Table<ExpansionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Expansions(Table<O> child, ForeignKey<O, ExpansionsRecord> key) {
        super(child, key, EXPANSIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Expansions as(String alias) {
        return new Expansions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Expansions as(Name alias) {
        return new Expansions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expansions rename(String name) {
        return new Expansions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expansions rename(Name name) {
        return new Expansions(name, null);
    }
}
