/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ufl.aida.ta2.Indexes;
import org.ufl.aida.ta2.Keys;
import org.ufl.aida.ta2.Public;
import org.ufl.aida.ta2.tables.records.MentionsForUpdateRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MentionsForUpdate extends TableImpl<MentionsForUpdateRecord> {

    private static final long serialVersionUID = 110472558;

    /**
     * The reference instance of <code>public.mentions_for_update</code>
     */
    public static final MentionsForUpdate MENTIONS_FOR_UPDATE = new MentionsForUpdate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MentionsForUpdateRecord> getRecordType() {
        return MentionsForUpdateRecord.class;
    }

    /**
     * The column <code>public.mentions_for_update.amid</code>.
     */
    public final TableField<MentionsForUpdateRecord, String> AMID = createField("amid", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.mentions_for_update.atype</code>.
     */
    public final TableField<MentionsForUpdateRecord, String> ATYPE = createField("atype", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mentions_for_update.acid</code>.
     */
    public final TableField<MentionsForUpdateRecord, String> ACID = createField("acid", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mentions_for_update.strings</code>.
     */
    public final TableField<MentionsForUpdateRecord, String[]> STRINGS = createField("strings", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.mentions_for_update.enstrings</code>.
     */
    public final TableField<MentionsForUpdateRecord, String[]> ENSTRINGS = createField("enstrings", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.mentions_for_update.resolved_string</code>.
     */
    public final TableField<MentionsForUpdateRecord, String> RESOLVED_STRING = createField("resolved_string", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mentions_for_update.resolved_score</code>.
     */
    public final TableField<MentionsForUpdateRecord, BigDecimal> RESOLVED_SCORE = createField("resolved_score", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.mentions_for_update.fromfuzzymatching</code>.
     */
    public final TableField<MentionsForUpdateRecord, Boolean> FROMFUZZYMATCHING = createField("fromfuzzymatching", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.mentions_for_update.resolved_type</code>.
     */
    public final TableField<MentionsForUpdateRecord, String> RESOLVED_TYPE = createField("resolved_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.mentions_for_update</code> table reference
     */
    public MentionsForUpdate() {
        this(DSL.name("mentions_for_update"), null);
    }

    /**
     * Create an aliased <code>public.mentions_for_update</code> table reference
     */
    public MentionsForUpdate(String alias) {
        this(DSL.name(alias), MENTIONS_FOR_UPDATE);
    }

    /**
     * Create an aliased <code>public.mentions_for_update</code> table reference
     */
    public MentionsForUpdate(Name alias) {
        this(alias, MENTIONS_FOR_UPDATE);
    }

    private MentionsForUpdate(Name alias, Table<MentionsForUpdateRecord> aliased) {
        this(alias, aliased, null);
    }

    private MentionsForUpdate(Name alias, Table<MentionsForUpdateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MentionsForUpdate(Table<O> child, ForeignKey<O, MentionsForUpdateRecord> key) {
        super(child, key, MENTIONS_FOR_UPDATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_MENTIONS_FOR_UPDATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MentionsForUpdateRecord> getPrimaryKey() {
        return Keys.PK_MENTIONS_FOR_UPDATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MentionsForUpdateRecord>> getKeys() {
        return Arrays.<UniqueKey<MentionsForUpdateRecord>>asList(Keys.PK_MENTIONS_FOR_UPDATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdate as(String alias) {
        return new MentionsForUpdate(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MentionsForUpdate as(Name alias) {
        return new MentionsForUpdate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MentionsForUpdate rename(String name) {
        return new MentionsForUpdate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MentionsForUpdate rename(Name name) {
        return new MentionsForUpdate(name, null);
    }
}
