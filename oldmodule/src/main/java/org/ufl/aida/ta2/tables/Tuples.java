/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.ufl.aida.ta2.Indexes;
import org.ufl.aida.ta2.Keys;
import org.ufl.aida.ta2.Public;
import org.ufl.aida.ta2.tables.records.TuplesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tuples extends TableImpl<TuplesRecord> {

    private static final long serialVersionUID = 364918875;

    /**
     * The reference instance of <code>public.tuples</code>
     */
    public static final Tuples TUPLES = new Tuples();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TuplesRecord> getRecordType() {
        return TuplesRecord.class;
    }

    /**
     * The column <code>public.tuples.nistType</code>.
     */
    public final TableField<TuplesRecord, String> NISTTYPE = createField("nistType", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.tuples.mid</code>.
     */
    public final TableField<TuplesRecord, String> MID = createField("mid", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tuples.score</code>.
     */
    public final TableField<TuplesRecord, Double> SCORE = createField("score", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.tuples.negated</code>.
     */
    public final TableField<TuplesRecord, Boolean> NEGATED = createField("negated", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.tuples.hedged</code>.
     */
    public final TableField<TuplesRecord, Boolean> HEDGED = createField("hedged", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.tuples.constituent</code>.
     */
    public final TableField<TuplesRecord, String[]> CONSTITUENT = createField("constituent", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.tuples.array_agg</code>.
     */
    public final TableField<TuplesRecord, Object[]> ARRAY_AGG = createField("array_agg", org.jooq.impl.SQLDataType.OTHER.getArrayDataType(), this, "");

    /**
     * Create a <code>public.tuples</code> table reference
     */
    public Tuples() {
        this(DSL.name("tuples"), null);
    }

    /**
     * Create an aliased <code>public.tuples</code> table reference
     */
    public Tuples(String alias) {
        this(DSL.name(alias), TUPLES);
    }

    /**
     * Create an aliased <code>public.tuples</code> table reference
     */
    public Tuples(Name alias) {
        this(alias, TUPLES);
    }

    private Tuples(Name alias, Table<TuplesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tuples(Name alias, Table<TuplesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tuples(Table<O> child, ForeignKey<O, TuplesRecord> key) {
        super(child, key, TUPLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_TUPLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TuplesRecord> getPrimaryKey() {
        return Keys.PK_TUPLES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TuplesRecord>> getKeys() {
        return Arrays.<UniqueKey<TuplesRecord>>asList(Keys.PK_TUPLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tuples as(String alias) {
        return new Tuples(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tuples as(Name alias) {
        return new Tuples(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tuples rename(String name) {
        return new Tuples(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tuples rename(Name name) {
        return new Tuples(name, null);
    }
}
