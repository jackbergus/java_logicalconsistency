/*
 * This file is generated by jOOQ.
 */
package org.ufl.aida.ta2.tables.pojos;


import java.util.Arrays;

import javax.annotation.Generated;

import org.ufl.aida.ta2.tables.interfaces.IExpansions;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Expansions implements IExpansions {

    private static final long serialVersionUID = -766257610;

    private String[] eid;
    private String   typeEvent;
    private Double   weight;
    private String[] arg1;
    private String[] arg2;
    private String[] arg3;
    private String[] arg4;
    private String[] arg5;
    private String[] arg6;
    private String[] arg7;
    private String   bitmapNull;
    private String   bitmapNeg;
    private String   bitmapHed;

    public Expansions() {}

    public Expansions(IExpansions value) {
        this.eid = value.getEid();
        this.typeEvent = value.getTypeEvent();
        this.weight = value.getWeight();
        this.arg1 = value.getArg1();
        this.arg2 = value.getArg2();
        this.arg3 = value.getArg3();
        this.arg4 = value.getArg4();
        this.arg5 = value.getArg5();
        this.arg6 = value.getArg6();
        this.arg7 = value.getArg7();
        this.bitmapNull = value.getBitmapNull();
        this.bitmapNeg = value.getBitmapNeg();
        this.bitmapHed = value.getBitmapHed();
    }

    public Expansions(
        String[] eid,
        String   typeEvent,
        Double   weight,
        String[] arg1,
        String[] arg2,
        String[] arg3,
        String[] arg4,
        String[] arg5,
        String[] arg6,
        String[] arg7,
        String   bitmapNull,
        String   bitmapNeg,
        String   bitmapHed
    ) {
        this.eid = eid;
        this.typeEvent = typeEvent;
        this.weight = weight;
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.arg3 = arg3;
        this.arg4 = arg4;
        this.arg5 = arg5;
        this.arg6 = arg6;
        this.arg7 = arg7;
        this.bitmapNull = bitmapNull;
        this.bitmapNeg = bitmapNeg;
        this.bitmapHed = bitmapHed;
    }

    @Override
    public String[] getEid() {
        return this.eid;
    }

    @Override
    public void setEid(String... eid) {
        this.eid = eid;
    }

    @Override
    public String getTypeEvent() {
        return this.typeEvent;
    }

    @Override
    public void setTypeEvent(String typeEvent) {
        this.typeEvent = typeEvent;
    }

    @Override
    public Double getWeight() {
        return this.weight;
    }

    @Override
    public void setWeight(Double weight) {
        this.weight = weight;
    }

    @Override
    public String[] getArg1() {
        return this.arg1;
    }

    @Override
    public void setArg1(String... arg1) {
        this.arg1 = arg1;
    }

    @Override
    public String[] getArg2() {
        return this.arg2;
    }

    @Override
    public void setArg2(String... arg2) {
        this.arg2 = arg2;
    }

    @Override
    public String[] getArg3() {
        return this.arg3;
    }

    @Override
    public void setArg3(String... arg3) {
        this.arg3 = arg3;
    }

    @Override
    public String[] getArg4() {
        return this.arg4;
    }

    @Override
    public void setArg4(String... arg4) {
        this.arg4 = arg4;
    }

    @Override
    public String[] getArg5() {
        return this.arg5;
    }

    @Override
    public void setArg5(String... arg5) {
        this.arg5 = arg5;
    }

    @Override
    public String[] getArg6() {
        return this.arg6;
    }

    @Override
    public void setArg6(String... arg6) {
        this.arg6 = arg6;
    }

    @Override
    public String[] getArg7() {
        return this.arg7;
    }

    @Override
    public void setArg7(String... arg7) {
        this.arg7 = arg7;
    }

    @Override
    public String getBitmapNull() {
        return this.bitmapNull;
    }

    @Override
    public void setBitmapNull(String bitmapNull) {
        this.bitmapNull = bitmapNull;
    }

    @Override
    public String getBitmapNeg() {
        return this.bitmapNeg;
    }

    @Override
    public void setBitmapNeg(String bitmapNeg) {
        this.bitmapNeg = bitmapNeg;
    }

    @Override
    public String getBitmapHed() {
        return this.bitmapHed;
    }

    @Override
    public void setBitmapHed(String bitmapHed) {
        this.bitmapHed = bitmapHed;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Expansions other = (Expansions) obj;
        if (eid == null) {
            if (other.eid != null)
                return false;
        }
        else if (!Arrays.equals(eid, other.eid))
            return false;
        if (typeEvent == null) {
            if (other.typeEvent != null)
                return false;
        }
        else if (!typeEvent.equals(other.typeEvent))
            return false;
        if (weight == null) {
            if (other.weight != null)
                return false;
        }
        else if (!weight.equals(other.weight))
            return false;
        if (arg1 == null) {
            if (other.arg1 != null)
                return false;
        }
        else if (!Arrays.equals(arg1, other.arg1))
            return false;
        if (arg2 == null) {
            if (other.arg2 != null)
                return false;
        }
        else if (!Arrays.equals(arg2, other.arg2))
            return false;
        if (arg3 == null) {
            if (other.arg3 != null)
                return false;
        }
        else if (!Arrays.equals(arg3, other.arg3))
            return false;
        if (arg4 == null) {
            if (other.arg4 != null)
                return false;
        }
        else if (!Arrays.equals(arg4, other.arg4))
            return false;
        if (arg5 == null) {
            if (other.arg5 != null)
                return false;
        }
        else if (!Arrays.equals(arg5, other.arg5))
            return false;
        if (arg6 == null) {
            if (other.arg6 != null)
                return false;
        }
        else if (!Arrays.equals(arg6, other.arg6))
            return false;
        if (arg7 == null) {
            if (other.arg7 != null)
                return false;
        }
        else if (!Arrays.equals(arg7, other.arg7))
            return false;
        if (bitmapNull == null) {
            if (other.bitmapNull != null)
                return false;
        }
        else if (!bitmapNull.equals(other.bitmapNull))
            return false;
        if (bitmapNeg == null) {
            if (other.bitmapNeg != null)
                return false;
        }
        else if (!bitmapNeg.equals(other.bitmapNeg))
            return false;
        if (bitmapHed == null) {
            if (other.bitmapHed != null)
                return false;
        }
        else if (!bitmapHed.equals(other.bitmapHed))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.eid == null) ? 0 : Arrays.hashCode(this.eid));
        result = prime * result + ((this.typeEvent == null) ? 0 : this.typeEvent.hashCode());
        result = prime * result + ((this.weight == null) ? 0 : this.weight.hashCode());
        result = prime * result + ((this.arg1 == null) ? 0 : Arrays.hashCode(this.arg1));
        result = prime * result + ((this.arg2 == null) ? 0 : Arrays.hashCode(this.arg2));
        result = prime * result + ((this.arg3 == null) ? 0 : Arrays.hashCode(this.arg3));
        result = prime * result + ((this.arg4 == null) ? 0 : Arrays.hashCode(this.arg4));
        result = prime * result + ((this.arg5 == null) ? 0 : Arrays.hashCode(this.arg5));
        result = prime * result + ((this.arg6 == null) ? 0 : Arrays.hashCode(this.arg6));
        result = prime * result + ((this.arg7 == null) ? 0 : Arrays.hashCode(this.arg7));
        result = prime * result + ((this.bitmapNull == null) ? 0 : this.bitmapNull.hashCode());
        result = prime * result + ((this.bitmapNeg == null) ? 0 : this.bitmapNeg.hashCode());
        result = prime * result + ((this.bitmapHed == null) ? 0 : this.bitmapHed.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Expansions (");

        sb.append(Arrays.toString(eid));
        sb.append(", ").append(typeEvent);
        sb.append(", ").append(weight);
        sb.append(", ").append(Arrays.toString(arg1));
        sb.append(", ").append(Arrays.toString(arg2));
        sb.append(", ").append(Arrays.toString(arg3));
        sb.append(", ").append(Arrays.toString(arg4));
        sb.append(", ").append(Arrays.toString(arg5));
        sb.append(", ").append(Arrays.toString(arg6));
        sb.append(", ").append(Arrays.toString(arg7));
        sb.append(", ").append(bitmapNull);
        sb.append(", ").append(bitmapNeg);
        sb.append(", ").append(bitmapHed);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IExpansions from) {
        setEid(from.getEid());
        setTypeEvent(from.getTypeEvent());
        setWeight(from.getWeight());
        setArg1(from.getArg1());
        setArg2(from.getArg2());
        setArg3(from.getArg3());
        setArg4(from.getArg4());
        setArg5(from.getArg5());
        setArg6(from.getArg6());
        setArg7(from.getArg7());
        setBitmapNull(from.getBitmapNull());
        setBitmapNeg(from.getBitmapNeg());
        setBitmapHed(from.getBitmapHed());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IExpansions> E into(E into) {
        into.from(this);
        return into;
    }
}
